- hosts: localhost
  connection: local
  vars:
    admin_user_and_group_name: "admin"
    sudo_users_group_name: "wheel"
    wkst_user_and_group_name: "userl"
  tasks:
    - name: "Configure system clock, time, and time zone"
      ansible.builtin.include_role:
        name: ext/ans_role_config_time
    - name: "Configure pacman mirror-server-list updates"
      ansible.builtin.include_role:
        name: ext/ans_role_config_pkg_repo_list_updates
    - name: "Configure Intel/AMD CPU-microcode updates to apply with initramfs"
      ansible.builtin.include_role:
        name: ext/ans_role_cpu_microcode
      vars:
        boot_dir_path: "/ROOT/default/@/boot"
    - name: "Configure persistent system bootup messages"
      ansible.builtin.include_role:
        name: ext/ans_role_config_boot_messages
    - name: "Add sudo-users group"
      ansible.builtin.include_role:
        name: ext/ans_role_add_group
      vars:
        group_name: "{{ sudo_users_group_name }}"
        is_system_group: true
    - name: "Add and configure admin user"
      ansible.builtin.include_role:
        name: ext/ans_role_add_user
      vars:
        user_name: "{{ admin_user_and_group_name }}"
        is_system_user: true
        user_groups: "{{ sudo_users_group_name }}"
    - name: "Add and configure workstation user {{ wkst_user_and_group_name }}"
      ansible.builtin.include_role:
        name: ext/ans_role_add_user
      vars:
        user_name: "{{ wkst_user_and_group_name }}"
    - name: "Configure sudo general system settings"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        ask_password_timeout: 45
        password_prompt_timeout_minutes: 0
        use_root_umask: true
    - name: "Configure sudo settings for group '{{ sudo_users_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        set_auth_for_group: "{{ sudo_users_group_name }}"
    - name: "Configure sudo shell enhancments for user '{{ admin_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sudo
      vars:
        user_for_shell_enhancements: "{{ admin_user_and_group_name }}"
    - name: "Configure bash shell for interactive use for user {{ admin_user_and_group_name }}"
      ansible.builtin.include_role:
        name: ext/ans_role_config_bash
      vars:
        user_name: "{{ admin_user_and_group_name }}"
    - name: "Ignore select '.pacnew' files after system upgrades"
      ansible.builtin.include_role:
        name: ext/ans_role_pacnew_ignore
      vars:
        file_paths:
          - "/etc/shadow"
          - "/etc/group"
          - "/etc/gshadow"
          - "/etc/fstab"
          - "/etc/hosts"
          - "/etc/pacman.d/mirrorlist"
          - "/etc/locale.gen"
    - name: "Set up configuration for installing unofficial packages"
      ansible.builtin.include_role:
        name: ans_role_config_unofficial_packages
    - name: "Install and configure video card drivers"
      ansible.builtin.include_role:
        name: ext/ans_role_config_video_drivers
      vars:
        video_card_make: "Intel"
        video_card_series: "HD"
        config_opengl_3d_accel: true
        config_video_decode_accel: true
        config_vulkan: false
    - name: "Install and configure basic sound packages"
      ansible.builtin.include_role:
        name: ext/ans_role_config_sound
    - name: "Install and configure the MATE desktop environment"
      ansible.builtin.include_role:
        name: ext/ans_role_config_mate_de
      vars:
        enable_sound_support: true
        enable_printing_support: true
        enable_power_support: false
    - name: "Install and configure the LightDM display manager"
      ansible.builtin.include_role:
        name: ext/ans_role_config_lightdm_dm
      vars:
        login_menu_hidden_users: "{{ admin_user_and_group_name }}"
    - name: "Create and configure XDG user dirs for '{{ wkst_user_and_group_name }}'"
      ansible.builtin.include_role:
        name: ext/ans_role_config_xdg_user_dirs
      vars:
        user_name: "{{ wkst_user_and_group_name }}"

